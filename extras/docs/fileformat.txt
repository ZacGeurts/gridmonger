

                         Gridmonger map file format
                         ==========================
                                 Version 4


                     https://gridmonger.johnnovak.net/



1. File format & structure
==========================

Gridmonger map files (.gmm extension) are stored in the generic RIFF
container format with the form type ID 'GRMM'.

Multi-byte numbers are stored in little-endian byte order in RIFF files.

The structure of a GRMM RIFF file is as follows:

  RIFF ('GRMM'           Gridmonger map file
      LIST ('map '       Map (group chunk)
          'prop'         Map properties
          'coor'         Global coordinate options
      )
      LIST ('lvls'       List of levels (min=0, max=999) (group chunk)
          LIST ('lvl '   Level (group chunk)
              'prop'       Level properties
              'coor'       Level coordinate options
              'cell'       Cell data
              'anno'       Annotations
              'regn'       Regions
          )
          ...            <repeat number of levels (numLevels) times>
      )
      'lnks'             Map links

      LIST ('stat'       Gridmonger app/UI state (group chunk, optional)
           'disp'          Display state (optional)
           'opts'          Options state (optional)
           'tool'          Tools pane state (optional)
           'notl'          Notes list pane state (optional)
  )


The 'stat' chunk can be safely ignored by 3rd party tools only interested
in the map data.


2. Description of GRMM chunks
=============================

- Strings that have their lengths specified with 'minRuneLen' & 'maxRuneLen'
  are in UTF-8. A single UTF-8 rune is encoded as a 1 to 4 byte sequence, so
  the byte limits of UTF-8 strings are (minRuneLen*4) to (maxRuneLen*4).

- Strings that have their lengths specified with 'len', 'minLen' & 'maxLen'
  are regular ASCII string.


Map chunks (in 'map ' group chunk)
----------------------------------

'prop'      Map properties
    UINT16  version             (min=1, max=1)
    WSTR    title               (minRuneLen=1, maxRuneLen=100)
    WSTR    game                (maxRuneLen=100)
    WSTR    author              (maxRuneLen=100)
    BSTR    creationTime        (len=19, local time as 'YYYY-MM-DD HH:mm:ss')
    WSTR    notes               (maxRuneLen=8000)

'coor'      Global coordinate options
    UINT8   origin              (0=north-west, 1=south-west)
    UINT8   rowStyle            (0=number, 1=letter)
    UINT8   columnStyle         (0=number, 1=letter)
    INT16   rowStart            (min=-9999, max=9999)
    INT16   columnStart         (min=-9999, max=9999)


Level chunks  (in 'lvl ' group chunk)
-------------------------------------

'prop'      Level properties
    WSTR    locationName        (minRuneLen=1, maxRuneLen=100)
    WSTR    levelName           (maxRuneLen=100)
    INT16   elevation           (min=-200, max=200)
    UINT16  numRows             (min=1, max=6666)
    UINT16  numColums           (min=1, max=6666)
    UINT8   overrideCoordOpts   (0=off, 1=on)
    WSTR    notes               (maxRuneLen=8000)

'coor'      Level properties
    UINT8   origin              (0=north-west, 1=south-west)
    UINT8   rowStyle            (0=number, 1=letter)
    UINT8   columnStyle         (0=number, 1=letter)
    INT16   rowStart            (min=-9999, max=9999)
    INT16   columnStart         (min=-9999, max=9999)


'cell'      Cell data
	Each level consists of (numRows+1 * numColums+1) number of cells. The
	extra row and column is needed to store the walls of the south and east
	borders, respectively (because each cell can only store its north and
	west walls).

    Cells are stored in row-major order; (0,0) is the top-left cell,
    (0,1) the cell right to it, etc.

    Cell data is stored in six layers (similar in concept to bitmaps).
    Each layer can use a different compressions method.

    The data stored per layer and their order are as follows:

      floor             UINT8   (see Floor enum in common.nim for mappings)
      floorOrientation  UINT8   (0=north, 1=east, 2=south, 3=west)
      floorColor        UINT8   (max=9, actual colours are theme-dependent)
      wallNorth         UINT8   (see Wall enum in common.nim for mappings)
      wallWest          UINT8   (see Wall enum in common.nim for mappings)
      trail             UINT8   (0=off, 1=on)


    Layer format:

      UINT8   compressionType

      if compressionType == 0   (uncompressed)
        (UINT8 * (numRows+1 * numColums+1))   uncompressed data

      if compressionType == 1   (run-length encoded)
        UINT32   length     length of compressed data in bytes
        (UINT8 * length)    RLE compressed data

        The compression uses simple RLE encoding:

        - Values less than 0x80 are literal values.
        - Values greater than or equal to 0x80 are header values, followed
          by a single data byte. The lower 7-bits of the header is
          (repeatCount - 1); the data byte should be repeated repeatCount
          times.

      if compressionType == 2   (zeroes)
        no data; the whole layer should be filled with zeroes


	Floor orientation:

	  Floor orientation represents the direction of traversal. E.g., a
	  north-oriented one-way door is drawn horizontally, with the arrow
	  through the door pointing northwards.

	  For some floor types, all four orientations are valid. Some other
	  types only allow horizontal and vertical orientations (north is used
	  for vertical, and east for horizontal for these).

	  Floor types that cannot be oriented have their orientation always set to
	  east.

	  See HorizVertFloors and RotatableFloors in main.nim for the list of
	  oriented floor types.


	Wall types:

	  Some special wall types have NE and SW variants. This controls on which
	  side of the wall is the special item located. E.g., if the north wall is
	  set to 'wLeverNE', the lever is on the north side of the north wall. If
	  the north wall is set to 'wLeverSE', the lever is on the south side of
	  the same north wall.


'anno'      Annotations
    UINT16  numAnnotations      (max=9999)

    numAnnotations records of:

      UINT16  row               (max=numRows-1    of the given level)
      UINT16  column            (max=numColumns-1 of the given level)
      UINT8   kind

      if kind == 0 (comment)

      if kind == 1 (indexed)
          UINT16  index         (max=9999)
          UINT8   indexColor    (max=3)

      if kind == 2 (customId)
          BSTR    custom ID     (minLen=1, maxLen=2, only alphanumeric)

      if kind == 3 (icon)
          UINT8   icon          (max=39, see NoteIcons in icons.nim
                                         for mappings)
      if kind == 4 (label)
          UINT8   labelColor    (max=3)

      WSTR    text              (minRuneLen=1, maxRuneLen=4000)


'regn'      Regions
    UINT8   enableRegions       (0=off, 1=on)
    UINT16  rowsPerRegion       (min=2, max=3333)
    UINT16  columnsPerRegion    (min=2, max=3333)
    UINT16  numRegions *
    UINT8   perRegionCoords     (0=off, 1=on)

    numRegions records of: **

      WSTR    name              (minRuneLen=1, maxRuneLen=100)
      WSTR    notes             (maxRuneLen=8000)

    *   Regions can be present (numRegions > 0) even if enableRegions is 0
        (off). This is to preserve their names and notes when they're
        re-enabled.

    **  Regions are written ordered by their region coordinates, left to
        right, top to bottom. The top-left region has region coordinates
        (0,0), the region right to it (0,1), etc.



Map links chunk
---------------

'lnks'      Map links
    UINT16  numLinks            (max=9999)

    numLinks records of:

      UINT16  srcLevelIndex     (max=numLevels-1)
      UINT16  srcRow            (max=numRows-1    of the given level)
      UINT16  srcColumn         (max=numColumns-1 of the given level)

      UINT16  destLevelIndex    (max=numLevel-1)
      UINT16  destRow           (max=numRows-1    of the given level)
      UINT16  destColumn        (max=numColumns-1 of the given level)


App state chunks (in 'stat' group chunk, optional)
--------------------------------------------------

'disp'      Display state (optional)
    BSTR    themeName *         (minLen=1, maxLen=100)

    * Cannot start or end with a space or '.'
      The following characters are disallowed:
        '/', '\', ':', '*', '?', '"', '<', '>', '|', '^', <zero byte>

    UINT8   zoomLevel           (min=1, max=20)

    if numLevels > 0:	

      UINT8   currLevelIndex      (max=numLevels-1)
      UINT16  cursorRow           (max=numRows-1    of the current level)
      UINT16  cursorColumn        (max=numColumns-1 of the current level)
      UINT16  viewStartRow        (max=numRows-1    of the current level)
      UINT16  viewStartColumn     (max=numColumns-1 of the current level)


'opts'      Options state (optional)
    UINT8   showCellCoords       (0=off, 1=on)
    UINT8   wasdMode             (0=off, 1=on)
    UINT8   walkMode             (0=off, 1=on)
    UINT8   pasteWraparound      (0=off, 1=on)


'tool'      Tools pane state (optional)
    UINT8   currFloorColor      (max=9)
    UINT8   currSpecialWall     (max=11, see SpecialWalls array in
                                         common.nim for mappings)

'notl'      Notes list pane state (optional)
    UINT8   scopeFilter       (0=map, 1=level, 2=region)
    UINT8   noteTypeFilter    (bit vector: b0=none, b1=number, b2=id, b3=icon)
    WSTR    searchTerm        (maxRuneLen=100)
    UINT8   orderBy           (0=noteType, 1=noteText)
    UINT8   linkCursor        (0=off, 1=on)
    UINT32  viewStartY

    numLevels records of (ordered by levelIndex):

      UINT8    levelSectionState     (0=closed, 1=open)

      if numRegions > 0 for the level (ordered by regionIndex)
      (note that regn.enableRegions can still be 0 (off)):

        UINT8    regionSectionState  (0=closed, 1=open)


3. Version history
==================

Version 4
---------
[Gridmonger v1.2.0 - 2024-04-22]

  - Remove redundant region coordinates from the 'regn' chunk.

  - Convert 'disp' chunk into a group chunk with multiple subchunks and
	- remove 'showToolsPane', 'showCurrentNotePane' and 'showNotesListPane'
	  from the 'opts' subchunk (now these became layout parameters and layouts
	  are stored in the config only).
    - add 'pasteWraparound' to the 'opts' subchunk.
    - add 'notl' subchunk.

  - 'floorOrientation' stores now cardinal directions (north, east, south,
	west) instead of just horizontal & vertical.

  - Deprecate OneWayDoorSW (26) floor type (OneWayDoor replaces it with all
    four orientations allowed).

  - Add Arrow (91) floor type.


Version 3
---------
[Gridmonger v1.1.0 - 2023-02-02]

  - Add Column (100) and Statue (110) floor types to the 'cell' chunk.


Version 2
---------
[Gridmonger v1.0.0 – 2022-11-06]

  - Allow multiple source links for teleporters (more than one 'src' location
    pointing to the same 'dest' location).


Version 1
---------
[Gridmonger v0.9 – 2022-09-21]

  - First version.

